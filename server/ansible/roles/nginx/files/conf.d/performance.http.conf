# Buffer size for POST submissions
# quantidade de memória para alocar para carregar os dados de post na memória
# 100 - bytes, 10K - kylobytes, 10M - megabytes
# se o valor for muito pequeno, nginx irá escrever no HD, o que é mais 
# devagar do que escrever na memória
client_body_buffer_size 10K;

# 8m = 8 megabytes, ou seja, não aceita post maiores que 8mb. Se for maior
# que 8m, o server responderá com o erro 413 "RequestEntity too Large"
client_max_body_size 20m;

# Buffer Size for Headers
# quantidade de memória alocada para ler os headers, sendo 1k 99%
# suficiente para todos os requests, o valor é tipicamente pequeno.
client_header_buffer_size 1k;

# Max time to receive client headers/body
# aqui setados para 12 milisegundos.

# não é o tempo que leva para transmitir o body inteiro, mas sim
# se refere as consectivas leituras para o Buffer, ambos por default
# são definidos com 60 segundos
# tempos aceitos: 30 - milisegundos, 30s - segundos, 30m - minutos, 
# 30h - horas, 30d - dias
client_body_timeout 12;
client_header_timeout 12;

# tempo máximo para manter uma conexão aberta
# o ideal é não manter tão longo, pois impacta no worker_connections.
keepalive_timeout 15;

# se o cliente não receber alguma resposta em 10 milisegundos, aborta
# todas as conexões
send_timeout 10;

# as próximas diretivas tem um impacto bom em performance

# quando enviar um arquivo estático do disco para o cliente, não buferizar,
# ou seja, não passar pela memória, e escrever direto para o cliente
sendfile on;

# otimiza o tamanho dos pacotes de dados enviados ao cliente
tcp_nopush on;

gzip on;

# 0-9
# 3 (numeros menores, menos recursos, arquivo maior)
# 8 (numeros maiores, mais recursos, arquivo menor)
# 3 a 4 é uma boa configuração
gzip_comp_level 3;

# indicar arquivos
gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript text/js application/javascript application/json;
